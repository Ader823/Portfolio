{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://pisetzner-d-hw3-refactor/./src/utils.ts","webpack://pisetzner-d-hw3-refactor/./src/enums/audio-defaults.enum.ts","webpack://pisetzner-d-hw3-refactor/./src/audio.ts","webpack://pisetzner-d-hw3-refactor/./src/canvas.ts","webpack://pisetzner-d-hw3-refactor/./src/spin-sprite.ts","webpack://pisetzner-d-hw3-refactor/./src/star-sprite.ts","webpack://pisetzner-d-hw3-refactor/./src/main.ts","webpack://pisetzner-d-hw3-refactor/./src/hamburger.ts","webpack://pisetzner-d-hw3-refactor/./src/loader.ts"],"sourcesContent":["const makeColor = (red: number, green: number, blue: number, alpha:number = 1) => {\n    return `rgba(${red},${green},${blue},${alpha})`;\n  };\n  \n  const getRandom = (min: number, max: number) => {\n    return Math.random() * (max - min) + min;\n  };\n  \n  const getRandomColor = () => {\n    const floor = 35; // so that colors are not too bright or too dark \n    const getByte = () => getRandom(floor,255-floor);\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\n  };\n\n  import { ColorStops } from \"./interfaces/colorStop.interface\";\n  \n  const getLinearGradient = (ctx:CanvasRenderingContext2D,startX:number,startY:number,endX:number,endY:number,colorStops:ColorStops) => {\n    let lg = ctx.createLinearGradient(startX,startY,endX,endY);\n    for(let stop of colorStops){\n      lg.addColorStop(stop.percent,stop.color);\n    }\n    return lg;\n  };\n  \n  // https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n  const goFullscreen = (element) => {\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element.mozRequestFullscreen) {\n      element.mozRequestFullscreen();\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n      element.webkitRequestFullscreen();\n    }\n    // .. and do nothing if the method is not supported\n  };\n  \n  export {makeColor, getRandomColor, getLinearGradient, goFullscreen, getRandom};","export enum DEFAULTS {\n    gain=0.5,\n    numSamples=64\n}","// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\nlet audioCtx:AudioContext;\n\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\nlet element:HTMLAudioElement, sourceNode: AudioNode, analyserNode: AnalyserNode, gainNode: GainNode, biquadFilter: BiquadFilterNode, lowshelfBiquadFilter:BiquadFilterNode;\n\nimport { DEFAULTS } from \"./enums/audio-defaults.enum\";\n\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\nconst setupWebaudio = (filepath: string) => {\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\n    const AudioContext = window.AudioContext;\n    audioCtx = new AudioContext();\n\n    // 2 - this creates an <audio> element\n    element = new Audio();\n\n    // 3 - have it point at a sound file\n    loadSoundFile(filepath);\n\n    // 4 - create an a source node that points at the <audio> element\n    sourceNode = audioCtx.createMediaElementSource(element);\n\n    biquadFilter = audioCtx.createBiquadFilter();\n    biquadFilter.type = \"highshelf\";\n    // biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\n    // biquadFilter.gain.setValueAtTime(20, audioCtx.currentTime);\n\n    lowshelfBiquadFilter = audioCtx.createBiquadFilter();\n    lowshelfBiquadFilter.type = \"lowshelf\";\n\n    // 5 - create an analyser node\n    // note the UK spelling of \"Analyser\"\n    analyserNode = audioCtx.createAnalyser();\n\n    // fft stands for Fast Fourier Transform\n    analyserNode.fftSize = DEFAULTS.numSamples;\n\n    // 7 - create a gain (volume) node\n    gainNode = audioCtx.createGain();\n\n    // 8 - connect the nodes - we now have an audio graph\n    sourceNode.connect(lowshelfBiquadFilter);\n    lowshelfBiquadFilter.connect(biquadFilter);\n    biquadFilter.connect(analyserNode);\n    analyserNode.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n}\nconst loadSoundFile = (filepath: string) => {\n    element.src = filepath;\n}\n\nconst playCurrentSound = () => {\n    element.play();\n}\n\nconst pauseCurrentSound = () => {\n    element.pause();\n}\n\n\nconst setHighshelf = (value: string) => {\n    const valueNum = Number(value);\n    biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime); // we created the `biquadFilter` (i.e. \"treble\") node last time\n    biquadFilter.gain.setValueAtTime(valueNum, audioCtx.currentTime);\n\n}\n\nconst setLowshelf = (value: string) => {\n    const valueNum = Number(value);\n    lowshelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\n    lowshelfBiquadFilter.gain.setValueAtTime(valueNum, audioCtx.currentTime);\n}\n\nconst setVolume = (value: string) => {\n    const valueNum = Number(value);\n    gainNode.gain.value = valueNum;\n}\nexport { audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, analyserNode, setHighshelf, setLowshelf };","import * as utils from './utils';\nimport { SpinSprite } from './spin-sprite';\nimport { StarSprite } from './star-sprite';\nimport { DrawParams } from './interfaces/drawParams.interface';\n\n\nlet ctx:CanvasRenderingContext2D, canvasWidth:number, canvasHeight:number, gradient:CanvasGradient, analyserNode: AnalyserNode, audioData:Uint8Array;\nconst BAR_WIDTH = 10;\nconst MAX_BAR_HEIGHT = 100;\nconst PADDING = 10;\n\nlet sprites = [];\n\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode) => {\n\t// create drawing context\n\tctx = canvasElement.getContext(\"2d\");\n\tcanvasWidth = canvasElement.width;\n\tcanvasHeight = canvasElement.height;\n\t// create a gradient that runs top to bottom\n\tgradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, [{ percent: 0, color: \"rgba(0,212,255,1)\" }, { percent: .12, color: \"rgba(4,121,195,1)\" }, { percent: .26, color: \"rgba(9,9,121,1)\" }, { percent: 1, color: \"rgba(2,0,36,1)\" }]);\n\t// keep a reference to the analyser node\n\tanalyserNode = analyserNodeRef;\n\t// this is the array where the analyser data will be stored\n\t// analyserNode.fftSize = 64;\n\taudioData = new Uint8Array(analyserNode.fftSize / 2);\n\n\tgenerateStars();\n\tsprites[0] = new SpinSprite({x: canvasWidth / 2, y: canvasHeight / 2, width: 200, height: 200, path:'./media/images/earth.png'});\n}\n\nconst draw = (params:DrawParams) => {\n\t// 1 - populate the audioData array with the frequency data from the analyserNode\n\t// notice these arrays are passed \"by reference\" \n\n\tif (params.useFrequencyData) {\n\t\tanalyserNode.getByteFrequencyData(audioData);\n\t} else {\n\t\tanalyserNode.getByteTimeDomainData(audioData); // waveform data\n\t}\n\n\t// 2 - draw background\n\tctx.save();\n\tctx.fillStyle = \"black\";\n\tctx.globalAlpha = 0.1;\n\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\tctx.restore();\n\n\t// 3 - draw gradient\n\tif (params.showGradient) {\n\t\tctx.save();\n\t\tctx.fillStyle = gradient;\n\t\tctx.globalAlpha = 0.3;\n\t\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.restore();\n\t}\n\n\t// 4 - draw bars\n\tif (params.showBars) {\n\t\tctx.fillStyle = \"rgb(0,0,0,.1)\";\n\t\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.fillStyle = \"red\";\n\t\tctx.save();\n\t\tctx.translate(canvasWidth / 2, canvasHeight / 2 - 100);\n\t\tfor (let b of Array.from(audioData)) {\n\t\t\tlet percent = b / 255;\n\t\t\tif (percent < .02) percent = .02;\n\t\t\tctx.translate(BAR_WIDTH, 0);\n\t\t\tctx.rotate(Math.PI * 2 / 32);\n\t\t\tctx.save();\n\t\t\tctx.scale(1, -1);\n\t\t\tctx.fillStyle = `rgb(${255 - b}, ${b * .8}, ${b})`;\n\t\t\tctx.fillRect(0, 0, BAR_WIDTH, MAX_BAR_HEIGHT * percent ^ 2);\n\n\t\t\tctx.fillStyle = `rgb(${b}, ${255 - b * .8}, ${255 - b})`;\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(0, b ^ 2 / 12, 5, 0, Math.PI * 2);\n\t\t\tctx.fill();\n\t\t\tctx.closePath();\n\n\t\t\tctx.restore();\n\t\t\tctx.translate(PADDING, 0);\n\t\t}\n\t\tctx.restore();\n\t}\n\n\tfor (let i = 1; i < params.numOfStars + 1; i++) {\n\t\tsprites[i + 1].draw(ctx);\n\t\tsprites[i + 1].update(audioData);\n\t}\n\tsprites[0].draw(ctx);\n\tsprites[0].update(audioData);\n\n\t// 5 - draw circles\n\tif (params.showCircles) {\n\t\tlet maxRadius = canvasHeight / 4;\n\t\tctx.save();\n\t\tctx.globalAlpha = 0.2;\n\t\tfor (let i = 0; i < audioData.length; i++) {\n\t\t\t// Circle Data\n\t\t\tlet percent = audioData[i] / 255;\n\t\t\tctx.lineWidth = percent * 10;\n\t\t\tlet circleRadius = percent * maxRadius;\n\t\t\t// Cyan Circles\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = utils.makeColor(0, 200, 200, 0.35 - percent / 3.0);\n\t\t\tctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius, 0, 2 * Math.PI, false);\n\t\t\tctx.stroke();\n\t\t\tctx.closePath();\n\n\t\t\t// Dark blue circles\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = utils.makeColor(0, 0, 255, 0.1 - percent / 10.0);\n\t\t\tctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * 1.5, 0, 2 * Math.PI, false);\n\t\t\tctx.stroke();\n\t\t\tctx.closePath();\n\n\t\t\t// Small Pink Circles\n\t\t\tctx.save();\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = utils.makeColor(200, 0, 200, 0.5 - percent / 5.0);\n\t\t\tctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * .5, 0, 2 * Math.PI, false);\n\t\t\tctx.stroke();\n\t\t\tctx.closePath();\n\t\t\tctx.restore();\n\t\t}\n\t\tctx.restore();\n\n\t}\n\t// 6 - bitmap manipulation\n\t// TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \n\t// regardless of whether or not we are applying a pixel effect\n\t// At some point, refactor this code so that we are looping though the image data only if\n\t// it is necessary\n\n\t// A) grab all of the pixels on the canvas and put them in the `data` array\n\t// `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\n\t// the variable `data` below is a reference to that array \n\tlet imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n\tlet data = imageData.data;\n\tlet length = data.length;\n\tlet width = imageData.width;\n\t// B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\n\tfor (let i = 0; i < length; i += 4) {\n\t\t// C) randomly change every 20th pixel to red\n\t\tif (params.showNoise && Math.random() < 0.05) {\n\t\t\t// data[i] is the red channel\n\t\t\t// data[i+1] is the green channel\n\t\t\t// data[i+2] is the blue channel\n\t\t\t// data[i+3] is the alpha channel\n\t\t\tdata[i] = data[i + 1] = data[i + 2] = 0; // zero out the red and green and blue channels\n\t\t\tdata[i] = 255; // make the red channel 100% red\n\t\t} // end if\n\n\t\t// Color Filters\n\t\tlet red = data[i], green = data[i + 1], blue = data[i + 2];\n\t\tswitch (params.colorFilter) {\n\t\t\tcase \"none\":\n\t\t\t\tbreak;\n\t\t\tcase \"mars\":\n\t\t\t\tdata[i] = blue;\n\t\t\t\tdata[i + 1] = green;\n\t\t\t\tdata[i + 2] = red;\n\t\t\t\tbreak;\n\t\t\tcase \"uranus\":\n\t\t\t\tdata[i] = red;\n\t\t\t\tdata[i + 1] = blue;\n\t\t\t\tdata[i + 2] = green;\n\t\t\t\tbreak;\n\t\t\tcase \"saturn\":\n\t\t\t\tdata[i] = green;\n\t\t\t\tdata[i + 1] = green;\n\t\t\t\tdata[i + 2] = red;\n\t\t\t\tbreak;\n\t\t\tcase \"moon\":\n\t\t\t\tdata[i] = blue * .8;\n\t\t\t\tdata[i + 1] = blue * .8;\n\t\t\t\tdata[i + 2] = blue;\n\t\t\t\tbreak;\n\t\t}\n\t\t// Saturation / color boost\n\t\tdata[i] *= params.saturation;\n\t\tdata[i + 1] *= params.saturation;\n\t\tdata[i + 2] *= params.saturation;\n\n\t\tif (params.showInvert) {\n\t\t\tlet red = data[i], green = data[i + 1], blue = data[i + 2];\n\t\t\tdata[i] = 255 - red;\n\t\t\tdata[i + 1] = 255 - green;\n\t\t\tdata[i + 2] = 255 - blue;\n\t\t}\n\n\t} // end for\n\tif (params.showEmboss) {\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (i % 4 == 3) continue;\n\t\t\tdata[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\n\t\t}\n\t}\n\n\n\t// D) copy image data back to canvas\n\tctx.putImageData(imageData, 0, 0);\n\n\n}\n\nconst generateStars = () => {\n\tfor (let i = 0; i < 101; i++) {\n\t\tsprites[i + 1] = new StarSprite({x: utils.getRandom(0, canvasWidth), y: utils.getRandom(0, canvasHeight), spikes:4, outerRadius:15, innerRadius:5});\n\t}\n}\n\nexport { setupCanvas, draw, generateStars };","export class SpinSprite {\n\tstatic type = \"image\";\n\tx: number;\n\ty: number;\n\twidth: number;\n\theight: number;\n\tpath: string;\n\trotateAmount: number;\n\n\tconstructor({x, y, width, height, path}) {\n\t\tthis.rotateAmount = .1;\n\t\tObject.assign(this, {x, y, width, height, path});\n\n\t}\n\tupdate(audioData:Uint8Array) {\n\t\t// ctx.globalAlpha = 0.5;\n\t\tfor (let i = 0; i < audioData.length; i++) {\n\t\t\t// red - ish circles\n\t\t\tlet percent = audioData[i] / 255;\n\t\t\tthis.rotateAmount += percent / 255;\n\t\t}\n\t}\n\n\tdraw(ctx) {\n\t\tconst img = new Image();\n\t\timg.src = this.path;\n\t\tctx.save();\n\t\tctx.translate(this.x, this.y);\n\t\tctx.rotate(this.rotateAmount);\n\n\t\tctx.drawImage(img, -this.width / 2, -this.height / 2, this.width, this.height);\n\t\tctx.restore();\n\n\t}\n}","export class StarSprite {\n\tstatic type = \"star\";\n\tx: number;\n\ty: number;\n\tspikes: number;\n\touterRadius: number;\n\tinnerRadius: number;\n\tscaleValue: number;\n\tmaxSize: number;\n\tconstructor({x, y, spikes, outerRadius, innerRadius}) {\n\t\tObject.assign(this, {x, y, spikes, outerRadius, innerRadius});\n\t\tthis.scaleValue = 1;\n\t\tthis.maxSize = 10;\n\t}\n\n\tupdate(audioData:Uint8Array) {\n\t\tlet percent = audioData[20] / 255;\n\t\tthis.scaleValue = this.maxSize * percent / 10;\n\t}\n\n\tdraw(ctx) {\n\t\tctx.save();\n\t\tctx.translate(this.x, this.y);\n\t\tctx.scale(this.scaleValue, this.scaleValue);\n\t\tlet rot = Math.PI / 2 * 3;\n\t\tlet x1 = this.x;\n\t\tlet y1 = this.y;\n\t\tlet step = Math.PI / this.spikes;\n\n\t\tctx.strokeSyle = \"#000\";\n\n\t\tctx.beginPath();\n\n\t\tctx.moveTo(0, 0 - this.outerRadius)\n\t\tfor (let i = 0; i < this.spikes; i++) {\n\t\t\tx1 = Math.cos(rot) * this.outerRadius;\n\t\t\ty1 = Math.sin(rot) * this.outerRadius;\n\t\t\tctx.lineTo(x1, y1)\n\t\t\trot += step\n\n\t\t\tx1 = Math.cos(rot) * this.innerRadius;\n\t\t\ty1 = Math.sin(rot) * this.innerRadius;\n\t\t\tctx.lineTo(x1, y1)\n\t\t\trot += step\n\t\t}\n\t\tctx.lineTo(0, 0 - this.outerRadius)\n\t\tctx.closePath();\n\t\tctx.lineWidth = 5;\n\t\tctx.strokeStyle = 'white';\n\t\tctx.stroke();\n\t\tctx.fillStyle = 'white';\n\t\tctx.globalAlpha = .8;\n\t\tctx.fill();\n\t\tctx.restore();\n\t}\n}\n","import * as utils from './utils';\nimport * as audio from './audio';\nimport * as canvas from './canvas';\nimport { DrawParams } from './interfaces/drawParams.interface';\nimport { setupBurger } from './hamburger';\n\nconst Params: DrawParams = {\n    showGradient: true,\n    showBars: true,\n    showCircles: true,\n    showNoise: false,\n    showInvert: false,\n    showEmboss: false,\n    useFrequencyData: true,\n    numOfStars: 50,\n    saturation: 0,\n    colorFilter: \"none\"\n};\n\n\n// 1 - here we are faking an enumeration\nconst DEFAULTS = Object.freeze({\n    sound1: \"media/Your Love by The Outfield.mp3\"\n});\n\n\nconst init = () => {\n    audio.setupWebaudio(DEFAULTS.sound1);\n    console.log(\"init called\");\n    console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\n    let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\n    loadJson();\n    setupUI(canvasElement);\n    canvas.setupCanvas(canvasElement, audio.analyserNode);\n\n    loop();\n}\n\nconst setupUI = (canvasElement: HTMLCanvasElement) => {\n    setupBurger();\n\n    let playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\n    playButton.onclick = e => {\n        let target = e.target as HTMLButtonElement;\n        console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\n\n        if (audio.audioCtx.state == \"suspended\") {\n            audio.audioCtx.resume();\n        }\n        console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\n        if (target.dataset.playing == \"no\") {\n            audio.playCurrentSound();\n            target.dataset.playing = \"yes\";\n        } else {\n            audio.pauseCurrentSound();\n            target.dataset.playing = \"no\";\n        }\n    }\n\n    // A - hookup fullscreen button\n    const fsButton = document.querySelector(\"#fs-button\") as HTMLButtonElement;\n\n    // add .onclick event to button\n    fsButton.onclick = e => {\n        console.log(\"goFullscreen() called\");\n        utils.goFullscreen(canvasElement);\n    };\n\n    // C - hookup volume slider & label\n    let volumeSlider = document.querySelector(\"#volume-slider\") as HTMLInputElement;\n    let volumeLabel = document.querySelector(\"#volume-label\") as HTMLLabelElement;\n    // add .oninput event to the slider\n    volumeSlider.oninput = e => {\n        // set the gain\n        let target = e.target as HTMLInputElement;\n        audio.setVolume(target.value);\n        // Update value of label to match the value of the slider\n        volumeLabel.innerHTML = Math.round((Number(target.value) / 2 * 100)).toString();\n    }\n    // Set value of label to match initial value of slider\n    volumeSlider.dispatchEvent(new Event(\"input\"));\n\n\n    // D - hookup track <select>\n    let trackSelect = document.querySelector(\"#track-select\") as HTMLSelectElement\n    // add .onchange event to select\n    trackSelect.onchange = e => {\n        let target =  e.target as HTMLSelectElement;\n        audio.loadSoundFile(target.value);\n        // pause it if currect track is playing\n        if (playButton.dataset.playing == \"yes\") {\n            playButton.dispatchEvent(new MouseEvent(\"click\"));\n        }\n    }\n\n    // Canvas Display Options\n    let gradientCB = document.querySelector(\"#cb-gradient\") as HTMLInputElement;\n    gradientCB.checked = true;\n    gradientCB.onchange = e => {\n        let target = e.target as HTMLInputElement;\n        Params.showGradient = target.checked;\n    }\n\n    let barsCB = document.querySelector(\"#cb-bars\") as HTMLInputElement;\n    barsCB.checked = true;\n    barsCB.onchange = e => {\n        let target = e.target as HTMLInputElement;\n        Params.showBars = target.checked;\n    }\n\n    let circlesCB = document.querySelector(\"#cb-circles\") as HTMLInputElement;\n    circlesCB.checked = true;\n    circlesCB.onchange = e => {\n        let target = e.target as HTMLInputElement;\n        Params.showCircles = target.checked;\n    }\n\n    let noiseCB = document.querySelector(\"#cb-noise\") as HTMLInputElement;\n    noiseCB.onchange = e => {\n        let target = e.target as HTMLInputElement;\n        Params.showNoise = target.checked;\n    }\n    let invertCB = document.querySelector(\"#cb-invert\") as HTMLInputElement;\n    invertCB.onchange = e => {\n        let target = e.target as HTMLInputElement;\n        Params.showInvert = target.checked;\n    }\n\n    let embossCB = document.querySelector(\"#cb-emboss\") as HTMLInputElement;\n    embossCB.onchange = e => {\n        let target = e.target as HTMLInputElement;\n        Params.showEmboss = target.checked;\n    }\n\n    //  THESE MIGHT BE INPUT ELEMENTS\n    let btnFrequencyData = document.querySelector(\"#btn-frequency-data\") as HTMLInputElement;\n    let btnTimeData = document.querySelector(\"#btn-time-domain\") as HTMLInputElement;\n    btnFrequencyData.checked = Params.useFrequencyData;\n    btnFrequencyData.onchange = e => {\n        let target = e.target as HTMLButtonElement;\n        Params.useFrequencyData = Boolean(target.value);\n\n    }\n    btnTimeData.onchange = e => {\n        let target = e.target as HTMLInputElement;\n        Params.useFrequencyData = Boolean(target.value);\n    }\n\n    // Bass Boost\n    let bassSlider = document.querySelector(\"#bass-slider\") as HTMLInputElement;\n    let bassLabel = document.querySelector(\"#bass-label\") as HTMLLabelElement;\n    // add .oninput event to the slider\n    bassSlider.oninput = e => {\n        // set the gain\n        let target = e.target as HTMLInputElement;\n        audio.setLowshelf(target.value);\n        // Update value of label to match the value of the slider\n        bassLabel.innerHTML = target.value;\n    }\n    // Set value of label to match initial value of slider\n    bassSlider.dispatchEvent(new Event(\"input\"));\n\n    // Trebble Boost\n    let trebleSlider = document.querySelector(\"#treble-slider\") as HTMLInputElement;\n    let trebleLabel = document.querySelector(\"#treble-label\") as HTMLInputElement;\n    // add .oninput event to the slider\n    trebleSlider.oninput = e => {\n        // set the gain\n        let target = e.target as HTMLInputElement;\n        audio.setHighshelf(target.value);\n        // Update value of label to match the value of the slider\n        trebleLabel.innerHTML = target.value;\n    }\n    // Set value of label to match initial value of slider\n    trebleSlider.dispatchEvent(new Event(\"input\"));\n\n\n    // Star Slider\n    let starSlider = document.querySelector(\"#star-slider\") as HTMLInputElement;\n    starSlider.value = Params.numOfStars.toString();\n    let starLabel = document.querySelector(\"#star-label\") as HTMLLabelElement;\n    // add .oninput event to the slider\n    starSlider.oninput = e => {\n        let target = e.target as HTMLInputElement;\n        Params.numOfStars = Number(target.value);\n        starLabel.innerHTML = target.value;\n    }\n    // Set value of label to match initial value of slider\n    starSlider.dispatchEvent(new Event(\"input\"));\n\n    let btnRandStars = document.querySelector(\"#btn-stars\") as HTMLButtonElement;\n    btnRandStars.onclick = () => canvas.generateStars();\n\n\n    // Saturation Slider\n    let satSlider = document.querySelector(\"#sat-slider\") as HTMLInputElement;\n    satSlider.value = Params.saturation.toString();\n    let satLabel = document.querySelector(\"#sat-label\") as HTMLLabelElement;\n    // add .oninput event to the slider\n    satSlider.oninput = e => {\n        let target = e.target as HTMLInputElement;\n        Params.saturation = Number(target.value);\n        satLabel.innerHTML = target.value;\n    }\n    // Set value of label to match initial value of slider\n    satSlider.dispatchEvent(new Event(\"input\"));\n\n\n    // Color Filters\n    let filterSelect = document.querySelector(\"#filter-select\") as HTMLSelectElement;\n    // add .onchange event to select\n    filterSelect.onchange = e => {\n        let target = e.target as HTMLSelectElement;\n        Params.colorFilter = target.value; \n    }\n\n} // end setupUI\n\nconst loop = () => {\n    setTimeout(loop);\n    canvas.draw(Params);\n}\n\nconst jsonLoaded = e => {\n    const string = e.target.responseText;\n    let json;\n    try {\n        json = JSON.parse(string);\n    } catch {\n        return\n    }\n    // Reading the heading from the json\n    document.querySelector(\"#heading\").innerHTML = json.title;\n\n    // Loading the audio files from the json\n    let audioOptions = json.audioFiles;\n    const audioHtml = audioOptions.map(w => `<option value=\"media/${w}.mp3\"> ${w}</option>`).join(\"\");\n    document.querySelector(\"#track-select\").innerHTML = audioHtml;\n\n    // Loading the instructions from the json\n    document.querySelector(\"#instructions\").innerHTML = `<p>${json.instructions}</p>`\n}\n\nconst loadJson = () => {\n    const url = \"data/av-data.json\";\n    const xhr = new XMLHttpRequest();\n    xhr.onload = jsonLoaded;\n    xhr.onerror = (e: Event) => {\n        let target = e.target as XMLHttpRequest;\n        console.log(`In error - HTTP Status Code = ${target.status}`);\n    }\n    xhr.open(\"GET\", url);\n    xhr.send();\n};\n\nexport { init };","// Toggle Burger Menu\nexport const setupBurger = () => {\n  let burgerIcon = document.querySelector(\"#burger\");\n  let navbarMenu = document.querySelector(\"#nav-links\");\n  burgerIcon.addEventListener('click', () => {\n    navbarMenu.classList.toggle('is-active');\n  })\n}","import * as main from \"./main\";\nwindow.onload = ()=>{\n\tconsole.log(\"window.onload called\");\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\n\t// 2 - start up app\n\tmain.init();\n}"],"names":["DEFAULTS","audioCtx","sourceNode","analyserNode","gainNode","biquadFilter","lowshelfBiquadFilter","makeColor","red","green","blue","alpha","getRandom","min","max","Math","random","ctx","canvasWidth","canvasHeight","gradient","audioData","loadSoundFile","filepath","src","x","y","width","height","path","this","rotateAmount","Object","assign","update","i","length","percent","draw","img","Image","save","translate","rotate","drawImage","restore","type","spikes","outerRadius","innerRadius","scaleValue","maxSize","scale","rot","PI","x1","y1","step","strokeSyle","beginPath","moveTo","cos","sin","lineTo","closePath","lineWidth","strokeStyle","stroke","fillStyle","globalAlpha","fill","sprites","generateStars","StarSprite","Params","showGradient","showBars","showCircles","showNoise","showInvert","showEmboss","useFrequencyData","numOfStars","saturation","colorFilter","freeze","sound1","setupUI","canvasElement","burgerIcon","navbarMenu","document","querySelector","addEventListener","classList","toggle","playButton","onclick","e","target","console","log","state","resume","dataset","playing","play","pause","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","volumeSlider","volumeLabel","oninput","value","valueNum","Number","gain","innerHTML","round","toString","dispatchEvent","Event","onchange","MouseEvent","gradientCB","checked","barsCB","circlesCB","btnFrequencyData","btnTimeData","Boolean","bassSlider","bassLabel","frequency","setValueAtTime","currentTime","trebleSlider","trebleLabel","starSlider","starLabel","satSlider","satLabel","loop","setTimeout","params","getByteFrequencyData","getByteTimeDomainData","fillRect","Array","from","b","arc","maxRadius","circleRadius","imageData","getImageData","data","putImageData","jsonLoaded","json","string","responseText","JSON","parse","title","audioHtml","audioFiles","map","w","join","instructions","loadJson","xhr","XMLHttpRequest","onload","onerror","status","open","send","window","AudioContext","getByte","Audio","createMediaElementSource","createBiquadFilter","createAnalyser","fftSize","numSamples","createGain","connect","destination","analyserNodeRef","getContext","startX","startY","endX","endY","lg","createLinearGradient","color","addColorStop","Uint8Array","SpinSprite"],"sourceRoot":""}